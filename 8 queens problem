N = 8  # board size

# Function to print the chessboard
def print_board(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print()

# Check if a queen can be placed safely
def is_safe(board, row, col):
    # Check column
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper left diagonal
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j]:
            return False

    # Check upper right diagonal
    for i, j in zip(range(row-1, -1, -1), range(col+1, N)):
        if board[i][j]:
            return False

    return True

# Solve using backtracking
def solve(board, row=0):
    if row == N:
        print_board(board)  # print one solution
        return True

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1  # place queen
            if solve(board, row+1):
                return True
            board[row][col] = 0  # backtrack
    return False

# Main
if __name__ == "__main__":
    board = [[0]*N for _ in range(N)]
    solve(board)
